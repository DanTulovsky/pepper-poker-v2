# https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke
name: Docker

on:
  push:
    # Publish `main` as Docker `latest` image.
    branches:
      - main

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  IMAGE_NAME: server
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cluster0
  GKE_REGION: us-east1
  DEPLOYMENT_NAME: pepper-poker
  GHCR_USERNAME: dantulovsky
  GHCR_REPO: pepper-poker-v2
  GHCR_HOST: ghcr.io
  NAMESPACE: poker

jobs:
  # Build, push and deploy
  # See also https://docs.docker.com/docker-hub/builds/
  build_push_deploy:
    # Ensure test job passes before pushing image.
    # needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@master
        with:
          version: "290.0.1"
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - run: |-
          gcloud container clusters get-credentials "$GKE_CLUSTER" --region "$GKE_REGION"

      - name: Log into registry
        run: echo "${{ secrets.CR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image $GHCR_HOST/$GHCR_USERNAME/$GHCR_REPO/$IMAGE_NAME:TAG=$GHCR_HOST/$GHCR_USERNAME/$GHCR_REPO/$IMAGE_NAME:$GITHUB_SHA
          ./kustomize edit set label version:$GITHUB_SHA
          ./kustomize build . | kubectl --namespace=$NAMESPACE apply -f -
          kubectl --namespace $NAMESPACE rollout status deployment/$DEPLOYMENT_NAME
          kubectl --namespace $NAMESPACE get services -o wide

      # - name: Rolling restart Deployment
      #   run: kubectl --namespace poker rollout restart deployment/pepper-poker

      - name: Verify deployment
        run: kubectl --namespace $NAMESPACE rollout status deployment/$DEPLOYMENT_NAME
