syntax = "proto3";
package poker;

option go_package = "github.com/DanTuovsky/pepper-poker-v2/proto";
// go
// protoc -I proto proto/poker.proto --go_out=plugins=grpc:.
// --go_opt=module=github.com/DanTuovsky/pepper-poker-v2

// c#
// protoc -I proto proto/poker.proto --csharp_out=client/grpc
// --grpc_out=client/grpc
// --plugin=protoc-gen-grpc=/usr/local/bin/grpc_csharp_plugin

service PokerServer {
  // AckToken acks an ack token
  rpc AckToken(AckTokenRequest) returns(AckTokenResponse) {}

  // JoinTable joins a table once authenticated
  rpc JoinTable(JoinTableRequest) returns(JoinTableResponse) {}

  // Play subscribes the client to updates after joining a table
  rpc Play(PlayRequest) returns(stream GameData) {}

  // Register registers with the server
  rpc Register(RegisterRequest) returns(RegisterResponse) {}

  // TakeTurn sends a Poker game turn request
  rpc TakeTurn(TakeTurnRequest) returns(TakeTurnResponse) {}
}

message AckTokenRequest {
  ClientInfo clientInfo = 10;
  string token = 20;
}
message AckTokenResponse {}

enum PlayerAction {
  PlayerActionNone = 0; PlayerActionRegister = 1; PlayerActionJoinTable = 2;
  PlayerActionPlay = 3;
  PlayerActionCall = 4;
  PlayerActionCheck = 5;
  PlayerActionBet = 6;
  PlayerActionFold = 7;
  PlayerActionAckToken = 8;
  PlayerActionAllIn = 9;
  PlayerActionBuyIn = 10;
  PlayerActionDisconnect = 11;
}

message ActionOpts {
  // Bet options
  int64 betAmount = 10;

  // Ack options
  string ackToken = 20;
}

message RegisterRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 20;
}
message RegisterResponse {
  string playerID = 10;
  string message = 20;
}

message JoinTableRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 20;
  string tableID = 30;
}
message JoinTableResponse {
  string tableID = 10;
  int64 position = 20;
  string message = 30;
}

message TakeTurnRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 20;
  ActionOpts actionOpts = 30;
}
message TakeTurnResponse { string message = 20; }
message DisconnectResponse { string message = 20; }

// PlayRequest is sent to register for the GameData streaming response
message PlayRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 50;
}

// ClientInfo is sent to the server with every RPC request, contains common data
// Not all fields are filled in for all requests
message ClientInfo {
  string playerID = 10;
  string playerName = 20;
  string playerUsername = 30;
  string tableID = 40;
  string password = 50;
}

enum GameState {
  GameStateWaitingPlayers = 0; GameStateInitializing = 1;
  GameStateReadyToStart = 2;
  GameStatePlayingSmallBlind = 3;
  GameStatePlayingBigBlind = 4;
  GameStatePlayingPreFlop = 5;
  GameStatePlayingFlop = 6;
  GameStatePlayingTurn = 7;
  GameStatePlayingRiver = 8;
  GameStatePlayingDone = 9;
  GameStateFinished = 10;
}

// GameInfo contains all the game info
message GameInfo {
  string tableName = 10;
  string tableID = 20;
  GameState gameState = 30;
  int64 gameStartsInSec = 40;
  string ackToken = 50;

  CommunityCards CommunityCards = 60;

  int64 maxPlayers = 100;
  int64 minPlayers = 110;
  int64 bigBlind = 120;
  int64 smallBlind = 125;
  int64 buyin = 130;

  // All players, no confidential info
  repeated Player players = 140;
  repeated string winners = 150;
  repeated Winners winning_ids = 160;
}

message Winners { repeated string ids = 10; }

// GameData is sent to the client, it tells the client when it's their turn and
// provides the current state
message GameData {
  GameInfo info = 10;

  string waitTurnID = 20;   // the ID of the player whose turn it is
  string waitTurnName = 30; // the name of the player whose turn it is
  int64 waitTurnNum = 35;   // the turn count of the player whose turn it is
  int64 waitTurnTimeLeftSec = 40; // turn time left for player
  int64 waitTurnTimeMaxSec = 45;
  string playerID = 50; // the ID of the calling player

  // calling player, includes confidential info
  Player player = 60;
}

// PlayerState is the player state according to the server
enum PlayerState {
  PlayerStateDefault = 0;

  // PlayerStateStackEmpty means the player has run out of money in the stack
  PlayerStateStackEmpty = 1;

  // PlayerStateBankEmpty means the player has run out of money in the bank
  PlayerStateBankEmpty = 2;

  // PlayerStateCurrentTurn marks this player's turn
  PlayerStateCurrentTurn = 3;
}

message Player {
  string name = 10;

  // only filled in for the player that matches the requesting player
  string id = 15;

  // position around the table
  int64 position = 20;

  PlayerMoney money = 30;
  PlayerState state = 50;

  // only filled in for the player that matches the requesting player except at
  // the end
  repeated Card card = 60;

  // Final hand of the player
  repeated Card hand = 70;
  string combo = 80;

  LastAction lastAction = 90;
}

message LastAction {
  PlayerAction action = 10;
  int64 amount = 20;
}

message PlayerMoney {
  // money player has in the bank, excluding what they're currently playing with
  int64 bank = 10;

  // money in the stack the player is playing with at their table
  int64 stack = 20;

  // total pot size so far in the hand
  int64 pot = 30;

  // current minimum bet this betting round
  int64 minBetThisRound = 40;

  // money bet by the player in the betting round so far
  int64 betThisRound = 50;

  // total money bet by the player in the hand so far
  int64 betThisHand = 60;

  // total money won by this player in the hand
  int64 winnings = 70;
}

// Cards
message CommunityCards { repeated Card card = 10; }

enum CardSuit { Spade = 0; Club = 1; Diamond = 2; Heart = 3; }
enum CardRank {
  Two = 0; Three = 1; Four = 2; Five = 3; Six = 4; Seven = 5; Eight = 6;
  Nine = 7;
  Ten = 8;
  Jack = 9;
  Queen = 10;
  King = 11;
  Ace = 12;
}

message Card {
  CardSuit suite = 10;
  CardRank rank = 20;
}
