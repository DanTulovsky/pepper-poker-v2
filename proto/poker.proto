syntax = "proto3";
package poker;

option go_package = "github.com/DanTuovsky/pepper-poker-v2/proto";
// go
// protoc -I proto proto/poker.proto --go_out=plugins=grpc:.
// --go_opt=module=github.com/DanTuovsky/pepper-poker-v2

// c#
// protoc -I proto proto/poker.proto --csharp_out=client/grpc
// --grpc_out=client/grpc
// --plugin=protoc-gen-grpc=/usr/local/bin/grpc_csharp_plugin

service PokerServer {
  // JoinTable joins a table once authenticated
  rpc JoinTable(JoinTableRequest) returns(JoinTableResponse) {}

  // Play subscribes the client to updates after joining a table
  rpc Play(PlayRequest) returns(stream GameData) {}

  // Register registers with the server
  rpc Register(RegisterRequest) returns(RegisterResponse) {}

  // TakeTurn sends a Poker game turn request
  rpc TakeTurn(TakeTurnRequest) returns(TakeTurnResponse) {}
}

enum PlayerAction {
  PlayerActionNone = 0; PlayerActionRegister = 1; PlayerActionJoinTable = 2;
  PlayerActionPlay = 3;
  PlayerActionCall = 4;
  PlayerActionCheck = 5;
  PlayerActionBet = 6;
  PlayerActionFold = 7;
}

message ActionOpts {
  // Bet options
  int64 betAmount = 10;
}

message RegisterRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 20;
}
message RegisterResponse {
  string playerID = 10;
  string message = 20;
}

message JoinTableRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 20;
  string tableID = 30;
}
message JoinTableResponse {
  string tableID = 10;
  int64 position = 20;
  string message = 30;
}

message TakeTurnRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 20;
  ActionOpts actionOpts = 30;
}
message TakeTurnResponse { string message = 20; }

// PlayRequest is sent to register for the GameData streaming response
message PlayRequest {
  ClientInfo clientInfo = 10;
  PlayerAction playerAction = 50;
}

// ClientInfo is sent to the server with every RPC request, contains common data
// Not all fields are filled in for all requests
message ClientInfo {
  string playerID = 10;
  string playerName = 20;
  string tableID = 30;
}

// GameInfo contains all the game info
message GameInfo {
  string tableName = 10;
  string tableID = 20;
  int64 maxPlayers = 30;
  int64 minPlayers = 40;
}

// GameData is sent to the client, it tells the client when it's their turn and
// provides the current state
message GameData {
  GameInfo info = 10;
  string waitTurnID = 20; // the ID of the player whose turn it is
  string playerID = 30;   // the ID of the calling player
}
