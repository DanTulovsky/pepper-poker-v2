// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: poker.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlayerAction int32

const (
	PlayerAction_PlayerActionNone      PlayerAction = 0
	PlayerAction_PlayerActionRegister  PlayerAction = 1
	PlayerAction_PlayerActionJoinTable PlayerAction = 2
	PlayerAction_PlayerActionPlay      PlayerAction = 3
	PlayerAction_PlayerActionCall      PlayerAction = 4
	PlayerAction_PlayerActionCheck     PlayerAction = 5
	PlayerAction_PlayerActionBet       PlayerAction = 6
	PlayerAction_PlayerActionFold      PlayerAction = 7
	PlayerAction_PlayerActionAckToken  PlayerAction = 8
	PlayerAction_PlayerActionAllIn     PlayerAction = 9
)

// Enum value maps for PlayerAction.
var (
	PlayerAction_name = map[int32]string{
		0: "PlayerActionNone",
		1: "PlayerActionRegister",
		2: "PlayerActionJoinTable",
		3: "PlayerActionPlay",
		4: "PlayerActionCall",
		5: "PlayerActionCheck",
		6: "PlayerActionBet",
		7: "PlayerActionFold",
		8: "PlayerActionAckToken",
		9: "PlayerActionAllIn",
	}
	PlayerAction_value = map[string]int32{
		"PlayerActionNone":      0,
		"PlayerActionRegister":  1,
		"PlayerActionJoinTable": 2,
		"PlayerActionPlay":      3,
		"PlayerActionCall":      4,
		"PlayerActionCheck":     5,
		"PlayerActionBet":       6,
		"PlayerActionFold":      7,
		"PlayerActionAckToken":  8,
		"PlayerActionAllIn":     9,
	}
)

func (x PlayerAction) Enum() *PlayerAction {
	p := new(PlayerAction)
	*p = x
	return p
}

func (x PlayerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[0].Descriptor()
}

func (PlayerAction) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[0]
}

func (x PlayerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerAction.Descriptor instead.
func (PlayerAction) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

type GameState int32

const (
	GameState_GameStateWaitingPlayers    GameState = 0
	GameState_GameStateInitializing      GameState = 1
	GameState_GameStateReadyToStart      GameState = 2
	GameState_GameStatePlayingSmallBlind GameState = 3
	GameState_GameStatePlayingBigBlind   GameState = 4
	GameState_GameStatePlayingPreFlop    GameState = 5
	GameState_GameStatePlayingFlop       GameState = 6
	GameState_GameStatePlayingTurn       GameState = 7
	GameState_GameStatePlayingRiver      GameState = 8
	GameState_GameStatePlayingDone       GameState = 9
	GameState_GameStateFinished          GameState = 10
)

// Enum value maps for GameState.
var (
	GameState_name = map[int32]string{
		0:  "GameStateWaitingPlayers",
		1:  "GameStateInitializing",
		2:  "GameStateReadyToStart",
		3:  "GameStatePlayingSmallBlind",
		4:  "GameStatePlayingBigBlind",
		5:  "GameStatePlayingPreFlop",
		6:  "GameStatePlayingFlop",
		7:  "GameStatePlayingTurn",
		8:  "GameStatePlayingRiver",
		9:  "GameStatePlayingDone",
		10: "GameStateFinished",
	}
	GameState_value = map[string]int32{
		"GameStateWaitingPlayers":    0,
		"GameStateInitializing":      1,
		"GameStateReadyToStart":      2,
		"GameStatePlayingSmallBlind": 3,
		"GameStatePlayingBigBlind":   4,
		"GameStatePlayingPreFlop":    5,
		"GameStatePlayingFlop":       6,
		"GameStatePlayingTurn":       7,
		"GameStatePlayingRiver":      8,
		"GameStatePlayingDone":       9,
		"GameStateFinished":          10,
	}
)

func (x GameState) Enum() *GameState {
	p := new(GameState)
	*p = x
	return p
}

func (x GameState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameState) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[1].Descriptor()
}

func (GameState) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[1]
}

func (x GameState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameState.Descriptor instead.
func (GameState) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

type CardSuit int32

const (
	CardSuit_Spade   CardSuit = 0
	CardSuit_Club    CardSuit = 1
	CardSuit_Diamond CardSuit = 2
	CardSuit_Heart   CardSuit = 3
)

// Enum value maps for CardSuit.
var (
	CardSuit_name = map[int32]string{
		0: "Spade",
		1: "Club",
		2: "Diamond",
		3: "Heart",
	}
	CardSuit_value = map[string]int32{
		"Spade":   0,
		"Club":    1,
		"Diamond": 2,
		"Heart":   3,
	}
)

func (x CardSuit) Enum() *CardSuit {
	p := new(CardSuit)
	*p = x
	return p
}

func (x CardSuit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardSuit) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[2].Descriptor()
}

func (CardSuit) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[2]
}

func (x CardSuit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardSuit.Descriptor instead.
func (CardSuit) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{2}
}

type CardRank int32

const (
	CardRank_Two   CardRank = 0
	CardRank_Three CardRank = 1
	CardRank_Four  CardRank = 2
	CardRank_Five  CardRank = 3
	CardRank_Six   CardRank = 4
	CardRank_Seven CardRank = 5
	CardRank_Eight CardRank = 6
	CardRank_Nine  CardRank = 7
	CardRank_Ten   CardRank = 8
	CardRank_Jack  CardRank = 9
	CardRank_Queen CardRank = 10
	CardRank_King  CardRank = 11
	CardRank_Ace   CardRank = 12
)

// Enum value maps for CardRank.
var (
	CardRank_name = map[int32]string{
		0:  "Two",
		1:  "Three",
		2:  "Four",
		3:  "Five",
		4:  "Six",
		5:  "Seven",
		6:  "Eight",
		7:  "Nine",
		8:  "Ten",
		9:  "Jack",
		10: "Queen",
		11: "King",
		12: "Ace",
	}
	CardRank_value = map[string]int32{
		"Two":   0,
		"Three": 1,
		"Four":  2,
		"Five":  3,
		"Six":   4,
		"Seven": 5,
		"Eight": 6,
		"Nine":  7,
		"Ten":   8,
		"Jack":  9,
		"Queen": 10,
		"King":  11,
		"Ace":   12,
	}
)

func (x CardRank) Enum() *CardRank {
	p := new(CardRank)
	*p = x
	return p
}

func (x CardRank) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardRank) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[3].Descriptor()
}

func (CardRank) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[3]
}

func (x CardRank) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardRank.Descriptor instead.
func (CardRank) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{3}
}

type AckTokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInfo *ClientInfo `protobuf:"bytes,10,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	Token      string      `protobuf:"bytes,20,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AckTokenRequest) Reset() {
	*x = AckTokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckTokenRequest) ProtoMessage() {}

func (x *AckTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckTokenRequest.ProtoReflect.Descriptor instead.
func (*AckTokenRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

func (x *AckTokenRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *AckTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AckTokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AckTokenResponse) Reset() {
	*x = AckTokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AckTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckTokenResponse) ProtoMessage() {}

func (x *AckTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckTokenResponse.ProtoReflect.Descriptor instead.
func (*AckTokenResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

type ActionOpts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Bet options
	BetAmount int64 `protobuf:"varint,10,opt,name=betAmount,proto3" json:"betAmount,omitempty"`
	// Ack options
	AckToken string `protobuf:"bytes,20,opt,name=ackToken,proto3" json:"ackToken,omitempty"`
}

func (x *ActionOpts) Reset() {
	*x = ActionOpts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOpts) ProtoMessage() {}

func (x *ActionOpts) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOpts.ProtoReflect.Descriptor instead.
func (*ActionOpts) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{2}
}

func (x *ActionOpts) GetBetAmount() int64 {
	if x != nil {
		return x.BetAmount
	}
	return 0
}

func (x *ActionOpts) GetAckToken() string {
	if x != nil {
		return x.AckToken
	}
	return ""
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInfo   *ClientInfo  `protobuf:"bytes,10,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	PlayerAction PlayerAction `protobuf:"varint,20,opt,name=playerAction,proto3,enum=poker.PlayerAction" json:"playerAction,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{3}
}

func (x *RegisterRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *RegisterRequest) GetPlayerAction() PlayerAction {
	if x != nil {
		return x.PlayerAction
	}
	return PlayerAction_PlayerActionNone
}

type RegisterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID string `protobuf:"bytes,10,opt,name=playerID,proto3" json:"playerID,omitempty"`
	Message  string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *RegisterResponse) Reset() {
	*x = RegisterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterResponse) ProtoMessage() {}

func (x *RegisterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterResponse.ProtoReflect.Descriptor instead.
func (*RegisterResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{4}
}

func (x *RegisterResponse) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *RegisterResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type JoinTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInfo   *ClientInfo  `protobuf:"bytes,10,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	PlayerAction PlayerAction `protobuf:"varint,20,opt,name=playerAction,proto3,enum=poker.PlayerAction" json:"playerAction,omitempty"`
	TableID      string       `protobuf:"bytes,30,opt,name=tableID,proto3" json:"tableID,omitempty"`
}

func (x *JoinTableRequest) Reset() {
	*x = JoinTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTableRequest) ProtoMessage() {}

func (x *JoinTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTableRequest.ProtoReflect.Descriptor instead.
func (*JoinTableRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{5}
}

func (x *JoinTableRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *JoinTableRequest) GetPlayerAction() PlayerAction {
	if x != nil {
		return x.PlayerAction
	}
	return PlayerAction_PlayerActionNone
}

func (x *JoinTableRequest) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

type JoinTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableID  string `protobuf:"bytes,10,opt,name=tableID,proto3" json:"tableID,omitempty"`
	Position int64  `protobuf:"varint,20,opt,name=position,proto3" json:"position,omitempty"`
	Message  string `protobuf:"bytes,30,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *JoinTableResponse) Reset() {
	*x = JoinTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinTableResponse) ProtoMessage() {}

func (x *JoinTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinTableResponse.ProtoReflect.Descriptor instead.
func (*JoinTableResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{6}
}

func (x *JoinTableResponse) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *JoinTableResponse) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *JoinTableResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TakeTurnRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInfo   *ClientInfo  `protobuf:"bytes,10,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	PlayerAction PlayerAction `protobuf:"varint,20,opt,name=playerAction,proto3,enum=poker.PlayerAction" json:"playerAction,omitempty"`
	ActionOpts   *ActionOpts  `protobuf:"bytes,30,opt,name=actionOpts,proto3" json:"actionOpts,omitempty"`
}

func (x *TakeTurnRequest) Reset() {
	*x = TakeTurnRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeTurnRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeTurnRequest) ProtoMessage() {}

func (x *TakeTurnRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeTurnRequest.ProtoReflect.Descriptor instead.
func (*TakeTurnRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{7}
}

func (x *TakeTurnRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *TakeTurnRequest) GetPlayerAction() PlayerAction {
	if x != nil {
		return x.PlayerAction
	}
	return PlayerAction_PlayerActionNone
}

func (x *TakeTurnRequest) GetActionOpts() *ActionOpts {
	if x != nil {
		return x.ActionOpts
	}
	return nil
}

type TakeTurnResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,20,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TakeTurnResponse) Reset() {
	*x = TakeTurnResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TakeTurnResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TakeTurnResponse) ProtoMessage() {}

func (x *TakeTurnResponse) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TakeTurnResponse.ProtoReflect.Descriptor instead.
func (*TakeTurnResponse) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{8}
}

func (x *TakeTurnResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// PlayRequest is sent to register for the GameData streaming response
type PlayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientInfo   *ClientInfo  `protobuf:"bytes,10,opt,name=clientInfo,proto3" json:"clientInfo,omitempty"`
	PlayerAction PlayerAction `protobuf:"varint,50,opt,name=playerAction,proto3,enum=poker.PlayerAction" json:"playerAction,omitempty"`
}

func (x *PlayRequest) Reset() {
	*x = PlayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayRequest) ProtoMessage() {}

func (x *PlayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayRequest.ProtoReflect.Descriptor instead.
func (*PlayRequest) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{9}
}

func (x *PlayRequest) GetClientInfo() *ClientInfo {
	if x != nil {
		return x.ClientInfo
	}
	return nil
}

func (x *PlayRequest) GetPlayerAction() PlayerAction {
	if x != nil {
		return x.PlayerAction
	}
	return PlayerAction_PlayerActionNone
}

// ClientInfo is sent to the server with every RPC request, contains common data
// Not all fields are filled in for all requests
type ClientInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerID   string `protobuf:"bytes,10,opt,name=playerID,proto3" json:"playerID,omitempty"`
	PlayerName string `protobuf:"bytes,20,opt,name=playerName,proto3" json:"playerName,omitempty"`
	TableID    string `protobuf:"bytes,30,opt,name=tableID,proto3" json:"tableID,omitempty"`
}

func (x *ClientInfo) Reset() {
	*x = ClientInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientInfo) ProtoMessage() {}

func (x *ClientInfo) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientInfo.ProtoReflect.Descriptor instead.
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{10}
}

func (x *ClientInfo) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *ClientInfo) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *ClientInfo) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

// GameInfo contains all the game info
type GameInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName       string          `protobuf:"bytes,10,opt,name=tableName,proto3" json:"tableName,omitempty"`
	TableID         string          `protobuf:"bytes,20,opt,name=tableID,proto3" json:"tableID,omitempty"`
	GameState       GameState       `protobuf:"varint,30,opt,name=gameState,proto3,enum=poker.GameState" json:"gameState,omitempty"`
	GameStartsInSec int64           `protobuf:"varint,40,opt,name=gameStartsInSec,proto3" json:"gameStartsInSec,omitempty"`
	AckToken        string          `protobuf:"bytes,50,opt,name=ackToken,proto3" json:"ackToken,omitempty"`
	CommunityCards  *CommunityCards `protobuf:"bytes,60,opt,name=CommunityCards,proto3" json:"CommunityCards,omitempty"`
	MaxPlayers      int64           `protobuf:"varint,100,opt,name=maxPlayers,proto3" json:"maxPlayers,omitempty"`
	MinPlayers      int64           `protobuf:"varint,110,opt,name=minPlayers,proto3" json:"minPlayers,omitempty"`
	BigBlind        int64           `protobuf:"varint,120,opt,name=bigBlind,proto3" json:"bigBlind,omitempty"`
	Players         []*Player       `protobuf:"bytes,130,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *GameInfo) Reset() {
	*x = GameInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameInfo) ProtoMessage() {}

func (x *GameInfo) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameInfo.ProtoReflect.Descriptor instead.
func (*GameInfo) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{11}
}

func (x *GameInfo) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *GameInfo) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *GameInfo) GetGameState() GameState {
	if x != nil {
		return x.GameState
	}
	return GameState_GameStateWaitingPlayers
}

func (x *GameInfo) GetGameStartsInSec() int64 {
	if x != nil {
		return x.GameStartsInSec
	}
	return 0
}

func (x *GameInfo) GetAckToken() string {
	if x != nil {
		return x.AckToken
	}
	return ""
}

func (x *GameInfo) GetCommunityCards() *CommunityCards {
	if x != nil {
		return x.CommunityCards
	}
	return nil
}

func (x *GameInfo) GetMaxPlayers() int64 {
	if x != nil {
		return x.MaxPlayers
	}
	return 0
}

func (x *GameInfo) GetMinPlayers() int64 {
	if x != nil {
		return x.MinPlayers
	}
	return 0
}

func (x *GameInfo) GetBigBlind() int64 {
	if x != nil {
		return x.BigBlind
	}
	return 0
}

func (x *GameInfo) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

// GameData is sent to the client, it tells the client when it's their turn and
// provides the current state
type GameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info         *GameInfo `protobuf:"bytes,10,opt,name=info,proto3" json:"info,omitempty"`
	WaitTurnID   string    `protobuf:"bytes,20,opt,name=waitTurnID,proto3" json:"waitTurnID,omitempty"`     // the ID of the player whose turn it is
	WaitTurnName string    `protobuf:"bytes,30,opt,name=waitTurnName,proto3" json:"waitTurnName,omitempty"` // the name of the player whose turn it is
	WaitTurnNum  int64     `protobuf:"varint,35,opt,name=waitTurnNum,proto3" json:"waitTurnNum,omitempty"`  // the turn count of the player whose turn it is
	PlayerID     string    `protobuf:"bytes,40,opt,name=playerID,proto3" json:"playerID,omitempty"`         // the ID of the calling player
	Player       *Player   `protobuf:"bytes,50,opt,name=player,proto3" json:"player,omitempty"`             // the calling player, for convenience
}

func (x *GameData) Reset() {
	*x = GameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameData) ProtoMessage() {}

func (x *GameData) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameData.ProtoReflect.Descriptor instead.
func (*GameData) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{12}
}

func (x *GameData) GetInfo() *GameInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *GameData) GetWaitTurnID() string {
	if x != nil {
		return x.WaitTurnID
	}
	return ""
}

func (x *GameData) GetWaitTurnName() string {
	if x != nil {
		return x.WaitTurnName
	}
	return ""
}

func (x *GameData) GetWaitTurnNum() int64 {
	if x != nil {
		return x.WaitTurnNum
	}
	return 0
}

func (x *GameData) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *GameData) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// only filled in for the player that matches the requesting player
	Id string `protobuf:"bytes,15,opt,name=id,proto3" json:"id,omitempty"`
	// position around the table
	Position int64        `protobuf:"varint,20,opt,name=position,proto3" json:"position,omitempty"`
	Money    *PlayerMoney `protobuf:"bytes,30,opt,name=money,proto3" json:"money,omitempty"` // PlayerState state = 50;
	// only filled in for the player that matches the requesting player except at
	// the end
	Card []*Card `protobuf:"bytes,60,rep,name=card,proto3" json:"card,omitempty"`
	// Final hand of the player
	Hand  []*Card `protobuf:"bytes,70,rep,name=hand,proto3" json:"hand,omitempty"`
	Combo string  `protobuf:"bytes,80,opt,name=combo,proto3" json:"combo,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{13}
}

func (x *Player) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Player) GetMoney() *PlayerMoney {
	if x != nil {
		return x.Money
	}
	return nil
}

func (x *Player) GetCard() []*Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *Player) GetHand() []*Card {
	if x != nil {
		return x.Hand
	}
	return nil
}

func (x *Player) GetCombo() string {
	if x != nil {
		return x.Combo
	}
	return ""
}

type PlayerMoney struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// money player has in the bank, excluding what they're currently playing with
	Bank int64 `protobuf:"varint,10,opt,name=bank,proto3" json:"bank,omitempty"`
	// money in the stack the player is playing with at their table
	Stack int64 `protobuf:"varint,20,opt,name=stack,proto3" json:"stack,omitempty"`
	// total pot size so far in the hand
	Pot int64 `protobuf:"varint,30,opt,name=pot,proto3" json:"pot,omitempty"`
	// current minimum bet this betting round
	MinBetThisRound int64 `protobuf:"varint,40,opt,name=minBetThisRound,proto3" json:"minBetThisRound,omitempty"`
	// money bet by the player in the betting round so far
	BetThisRound int64 `protobuf:"varint,50,opt,name=betThisRound,proto3" json:"betThisRound,omitempty"`
	// total money bet by the player in the hand so far
	BetThisHand int64 `protobuf:"varint,60,opt,name=betThisHand,proto3" json:"betThisHand,omitempty"`
	// total money won by this player in the hand
	Winnings int64 `protobuf:"varint,70,opt,name=winnings,proto3" json:"winnings,omitempty"`
}

func (x *PlayerMoney) Reset() {
	*x = PlayerMoney{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerMoney) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerMoney) ProtoMessage() {}

func (x *PlayerMoney) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerMoney.ProtoReflect.Descriptor instead.
func (*PlayerMoney) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{14}
}

func (x *PlayerMoney) GetBank() int64 {
	if x != nil {
		return x.Bank
	}
	return 0
}

func (x *PlayerMoney) GetStack() int64 {
	if x != nil {
		return x.Stack
	}
	return 0
}

func (x *PlayerMoney) GetPot() int64 {
	if x != nil {
		return x.Pot
	}
	return 0
}

func (x *PlayerMoney) GetMinBetThisRound() int64 {
	if x != nil {
		return x.MinBetThisRound
	}
	return 0
}

func (x *PlayerMoney) GetBetThisRound() int64 {
	if x != nil {
		return x.BetThisRound
	}
	return 0
}

func (x *PlayerMoney) GetBetThisHand() int64 {
	if x != nil {
		return x.BetThisHand
	}
	return 0
}

func (x *PlayerMoney) GetWinnings() int64 {
	if x != nil {
		return x.Winnings
	}
	return 0
}

// Cards
type CommunityCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card []*Card `protobuf:"bytes,10,rep,name=card,proto3" json:"card,omitempty"`
}

func (x *CommunityCards) Reset() {
	*x = CommunityCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunityCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityCards) ProtoMessage() {}

func (x *CommunityCards) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommunityCards.ProtoReflect.Descriptor instead.
func (*CommunityCards) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{15}
}

func (x *CommunityCards) GetCard() []*Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Suite CardSuit `protobuf:"varint,10,opt,name=suite,proto3,enum=poker.CardSuit" json:"suite,omitempty"`
	Rank  CardRank `protobuf:"varint,20,opt,name=rank,proto3,enum=poker.CardRank" json:"rank,omitempty"`
}

func (x *Card) Reset() {
	*x = Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Card) ProtoMessage() {}

func (x *Card) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Card.ProtoReflect.Descriptor instead.
func (*Card) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{16}
}

func (x *Card) GetSuite() CardSuit {
	if x != nil {
		return x.Suite
	}
	return CardSuit_Spade
}

func (x *Card) GetRank() CardRank {
	if x != nil {
		return x.Rank
	}
	return CardRank_Two
}

var File_poker_proto protoreflect.FileDescriptor

var file_poker_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x22, 0x5a, 0x0a, 0x0f, 0x41, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f,
	0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x12, 0x0a, 0x10, 0x41, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62, 0x65, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x7d, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x48, 0x0a, 0x10, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a,
	0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x22, 0x63, 0x0a, 0x11, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x6b, 0x65, 0x54, 0x75,
	0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x52, 0x0a, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x73, 0x22, 0x2c, 0x0a, 0x10, 0x54, 0x61, 0x6b, 0x65,
	0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x79, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13,
	0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x62, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x44, 0x22, 0xfd, 0x02, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x09, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x67, 0x61,
	0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x49, 0x6e, 0x53, 0x65, 0x63, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x73, 0x49,
	0x6e, 0x53, 0x65, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x32, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x3d, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72,
	0x64, 0x73, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x52,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x6e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x69, 0x67, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x82, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x07, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x23, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x61, 0x69,
	0x74, 0x54, 0x75, 0x72, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x54,
	0x75, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77,
	0x61, 0x69, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x77,
	0x61, 0x69, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x18, 0x23, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x77, 0x61, 0x69, 0x74, 0x54, 0x75, 0x72, 0x6e, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x25, 0x0a, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x22, 0xca, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x05, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6f, 0x6b,
	0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x52, 0x05,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x3c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x18, 0x46,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x04, 0x68, 0x61, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x6d, 0x62, 0x6f, 0x22, 0xd5, 0x01,
	0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x61, 0x6e, 0x6b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x62, 0x61, 0x6e,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x6d, 0x69, 0x6e,
	0x42, 0x65, 0x74, 0x54, 0x68, 0x69, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x6d, 0x69, 0x6e, 0x42, 0x65, 0x74, 0x54, 0x68, 0x69, 0x73, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x65, 0x74, 0x54, 0x68, 0x69, 0x73, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x65, 0x74, 0x54, 0x68,
	0x69, 0x73, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x65, 0x74, 0x54, 0x68,
	0x69, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x62, 0x65,
	0x74, 0x54, 0x68, 0x69, 0x73, 0x48, 0x61, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x46, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x77, 0x69, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x31, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x22, 0x52, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64,
	0x12, 0x25, 0x0a, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74,
	0x52, 0x05, 0x73, 0x75, 0x69, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x2a, 0xf8, 0x01, 0x0a,
	0x0c, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e,
	0x65, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x79, 0x10, 0x03, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x65, 0x74, 0x10, 0x06,
	0x12, 0x14, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x6f, 0x6c, 0x64, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x10, 0x08,
	0x12, 0x15, 0x0a, 0x11, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x41, 0x6c, 0x6c, 0x49, 0x6e, 0x10, 0x09, 0x2a, 0xb9, 0x02, 0x0a, 0x09, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73,
	0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49,
	0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x54,
	0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x53, 0x6d, 0x61, 0x6c,
	0x6c, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x42, 0x69, 0x67, 0x42,
	0x6c, 0x69, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x65, 0x46, 0x6c, 0x6f,
	0x70, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x70, 0x10, 0x06, 0x12, 0x18, 0x0a,
	0x14, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e,
	0x67, 0x54, 0x75, 0x72, 0x6e, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x69, 0x76, 0x65, 0x72,
	0x10, 0x08, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x10, 0x0a, 0x2a, 0x37, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x53, 0x75, 0x69, 0x74, 0x12,
	0x09, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x64, 0x65, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x43, 0x6c,
	0x75, 0x62, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x61, 0x6d, 0x6f, 0x6e, 0x64, 0x10,
	0x02, 0x12, 0x09, 0x0a, 0x05, 0x48, 0x65, 0x61, 0x72, 0x74, 0x10, 0x03, 0x2a, 0x8c, 0x01, 0x0a,
	0x08, 0x43, 0x61, 0x72, 0x64, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x77, 0x6f,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x68, 0x72, 0x65, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x46, 0x6f, 0x75, 0x72, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x76, 0x65, 0x10,
	0x03, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x69, 0x78, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x65,
	0x76, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x69, 0x67, 0x68, 0x74, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x69, 0x6e, 0x65, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x65,
	0x6e, 0x10, 0x08, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x61, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x09, 0x0a,
	0x05, 0x51, 0x75, 0x65, 0x65, 0x6e, 0x10, 0x0a, 0x12, 0x08, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x67,
	0x10, 0x0b, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x63, 0x65, 0x10, 0x0c, 0x32, 0xbd, 0x02, 0x0a, 0x0b,
	0x50, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x08, 0x41,
	0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x41, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x6b, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x09, 0x4a, 0x6f,
	0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x04,
	0x50, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3d, 0x0a,
	0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08,
	0x54, 0x61, 0x6b, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x6b, 0x65, 0x54, 0x75, 0x72, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x6b, 0x65, 0x54, 0x75, 0x72,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2d, 0x5a, 0x2b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x44, 0x61, 0x6e, 0x54, 0x75, 0x6f,
	0x76, 0x73, 0x6b, 0x79, 0x2f, 0x70, 0x65, 0x70, 0x70, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2d, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_poker_proto_rawDescOnce sync.Once
	file_poker_proto_rawDescData = file_poker_proto_rawDesc
)

func file_poker_proto_rawDescGZIP() []byte {
	file_poker_proto_rawDescOnce.Do(func() {
		file_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_poker_proto_rawDescData)
	})
	return file_poker_proto_rawDescData
}

var file_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_poker_proto_goTypes = []interface{}{
	(PlayerAction)(0),         // 0: poker.PlayerAction
	(GameState)(0),            // 1: poker.GameState
	(CardSuit)(0),             // 2: poker.CardSuit
	(CardRank)(0),             // 3: poker.CardRank
	(*AckTokenRequest)(nil),   // 4: poker.AckTokenRequest
	(*AckTokenResponse)(nil),  // 5: poker.AckTokenResponse
	(*ActionOpts)(nil),        // 6: poker.ActionOpts
	(*RegisterRequest)(nil),   // 7: poker.RegisterRequest
	(*RegisterResponse)(nil),  // 8: poker.RegisterResponse
	(*JoinTableRequest)(nil),  // 9: poker.JoinTableRequest
	(*JoinTableResponse)(nil), // 10: poker.JoinTableResponse
	(*TakeTurnRequest)(nil),   // 11: poker.TakeTurnRequest
	(*TakeTurnResponse)(nil),  // 12: poker.TakeTurnResponse
	(*PlayRequest)(nil),       // 13: poker.PlayRequest
	(*ClientInfo)(nil),        // 14: poker.ClientInfo
	(*GameInfo)(nil),          // 15: poker.GameInfo
	(*GameData)(nil),          // 16: poker.GameData
	(*Player)(nil),            // 17: poker.Player
	(*PlayerMoney)(nil),       // 18: poker.PlayerMoney
	(*CommunityCards)(nil),    // 19: poker.CommunityCards
	(*Card)(nil),              // 20: poker.Card
}
var file_poker_proto_depIdxs = []int32{
	14, // 0: poker.AckTokenRequest.clientInfo:type_name -> poker.ClientInfo
	14, // 1: poker.RegisterRequest.clientInfo:type_name -> poker.ClientInfo
	0,  // 2: poker.RegisterRequest.playerAction:type_name -> poker.PlayerAction
	14, // 3: poker.JoinTableRequest.clientInfo:type_name -> poker.ClientInfo
	0,  // 4: poker.JoinTableRequest.playerAction:type_name -> poker.PlayerAction
	14, // 5: poker.TakeTurnRequest.clientInfo:type_name -> poker.ClientInfo
	0,  // 6: poker.TakeTurnRequest.playerAction:type_name -> poker.PlayerAction
	6,  // 7: poker.TakeTurnRequest.actionOpts:type_name -> poker.ActionOpts
	14, // 8: poker.PlayRequest.clientInfo:type_name -> poker.ClientInfo
	0,  // 9: poker.PlayRequest.playerAction:type_name -> poker.PlayerAction
	1,  // 10: poker.GameInfo.gameState:type_name -> poker.GameState
	19, // 11: poker.GameInfo.CommunityCards:type_name -> poker.CommunityCards
	17, // 12: poker.GameInfo.players:type_name -> poker.Player
	15, // 13: poker.GameData.info:type_name -> poker.GameInfo
	17, // 14: poker.GameData.player:type_name -> poker.Player
	18, // 15: poker.Player.money:type_name -> poker.PlayerMoney
	20, // 16: poker.Player.card:type_name -> poker.Card
	20, // 17: poker.Player.hand:type_name -> poker.Card
	20, // 18: poker.CommunityCards.card:type_name -> poker.Card
	2,  // 19: poker.Card.suite:type_name -> poker.CardSuit
	3,  // 20: poker.Card.rank:type_name -> poker.CardRank
	4,  // 21: poker.PokerServer.AckToken:input_type -> poker.AckTokenRequest
	9,  // 22: poker.PokerServer.JoinTable:input_type -> poker.JoinTableRequest
	13, // 23: poker.PokerServer.Play:input_type -> poker.PlayRequest
	7,  // 24: poker.PokerServer.Register:input_type -> poker.RegisterRequest
	11, // 25: poker.PokerServer.TakeTurn:input_type -> poker.TakeTurnRequest
	5,  // 26: poker.PokerServer.AckToken:output_type -> poker.AckTokenResponse
	10, // 27: poker.PokerServer.JoinTable:output_type -> poker.JoinTableResponse
	16, // 28: poker.PokerServer.Play:output_type -> poker.GameData
	8,  // 29: poker.PokerServer.Register:output_type -> poker.RegisterResponse
	12, // 30: poker.PokerServer.TakeTurn:output_type -> poker.TakeTurnResponse
	26, // [26:31] is the sub-list for method output_type
	21, // [21:26] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_poker_proto_init() }
func file_poker_proto_init() {
	if File_poker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckTokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AckTokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionOpts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeTurnRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TakeTurnResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerMoney); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunityCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poker_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_poker_proto_goTypes,
		DependencyIndexes: file_poker_proto_depIdxs,
		EnumInfos:         file_poker_proto_enumTypes,
		MessageInfos:      file_poker_proto_msgTypes,
	}.Build()
	File_poker_proto = out.File
	file_poker_proto_rawDesc = nil
	file_poker_proto_goTypes = nil
	file_poker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PokerServerClient is the client API for PokerServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PokerServerClient interface {
	// AckToken acks an ack token
	AckToken(ctx context.Context, in *AckTokenRequest, opts ...grpc.CallOption) (*AckTokenResponse, error)
	// JoinTable joins a table once authenticated
	JoinTable(ctx context.Context, in *JoinTableRequest, opts ...grpc.CallOption) (*JoinTableResponse, error)
	// Play subscribes the client to updates after joining a table
	Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (PokerServer_PlayClient, error)
	// Register registers with the server
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// TakeTurn sends a Poker game turn request
	TakeTurn(ctx context.Context, in *TakeTurnRequest, opts ...grpc.CallOption) (*TakeTurnResponse, error)
}

type pokerServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPokerServerClient(cc grpc.ClientConnInterface) PokerServerClient {
	return &pokerServerClient{cc}
}

func (c *pokerServerClient) AckToken(ctx context.Context, in *AckTokenRequest, opts ...grpc.CallOption) (*AckTokenResponse, error) {
	out := new(AckTokenResponse)
	err := c.cc.Invoke(ctx, "/poker.PokerServer/AckToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerServerClient) JoinTable(ctx context.Context, in *JoinTableRequest, opts ...grpc.CallOption) (*JoinTableResponse, error) {
	out := new(JoinTableResponse)
	err := c.cc.Invoke(ctx, "/poker.PokerServer/JoinTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerServerClient) Play(ctx context.Context, in *PlayRequest, opts ...grpc.CallOption) (PokerServer_PlayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PokerServer_serviceDesc.Streams[0], "/poker.PokerServer/Play", opts...)
	if err != nil {
		return nil, err
	}
	x := &pokerServerPlayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PokerServer_PlayClient interface {
	Recv() (*GameData, error)
	grpc.ClientStream
}

type pokerServerPlayClient struct {
	grpc.ClientStream
}

func (x *pokerServerPlayClient) Recv() (*GameData, error) {
	m := new(GameData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pokerServerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, "/poker.PokerServer/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pokerServerClient) TakeTurn(ctx context.Context, in *TakeTurnRequest, opts ...grpc.CallOption) (*TakeTurnResponse, error) {
	out := new(TakeTurnResponse)
	err := c.cc.Invoke(ctx, "/poker.PokerServer/TakeTurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PokerServerServer is the server API for PokerServer service.
type PokerServerServer interface {
	// AckToken acks an ack token
	AckToken(context.Context, *AckTokenRequest) (*AckTokenResponse, error)
	// JoinTable joins a table once authenticated
	JoinTable(context.Context, *JoinTableRequest) (*JoinTableResponse, error)
	// Play subscribes the client to updates after joining a table
	Play(*PlayRequest, PokerServer_PlayServer) error
	// Register registers with the server
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	// TakeTurn sends a Poker game turn request
	TakeTurn(context.Context, *TakeTurnRequest) (*TakeTurnResponse, error)
}

// UnimplementedPokerServerServer can be embedded to have forward compatible implementations.
type UnimplementedPokerServerServer struct {
}

func (*UnimplementedPokerServerServer) AckToken(context.Context, *AckTokenRequest) (*AckTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckToken not implemented")
}
func (*UnimplementedPokerServerServer) JoinTable(context.Context, *JoinTableRequest) (*JoinTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinTable not implemented")
}
func (*UnimplementedPokerServerServer) Play(*PlayRequest, PokerServer_PlayServer) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}
func (*UnimplementedPokerServerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (*UnimplementedPokerServerServer) TakeTurn(context.Context, *TakeTurnRequest) (*TakeTurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeTurn not implemented")
}

func RegisterPokerServerServer(s *grpc.Server, srv PokerServerServer) {
	s.RegisterService(&_PokerServer_serviceDesc, srv)
}

func _PokerServer_AckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServerServer).AckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.PokerServer/AckToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServerServer).AckToken(ctx, req.(*AckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokerServer_JoinTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServerServer).JoinTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.PokerServer/JoinTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServerServer).JoinTable(ctx, req.(*JoinTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokerServer_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PlayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PokerServerServer).Play(m, &pokerServerPlayServer{stream})
}

type PokerServer_PlayServer interface {
	Send(*GameData) error
	grpc.ServerStream
}

type pokerServerPlayServer struct {
	grpc.ServerStream
}

func (x *pokerServerPlayServer) Send(m *GameData) error {
	return x.ServerStream.SendMsg(m)
}

func _PokerServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.PokerServer/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PokerServer_TakeTurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TakeTurnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PokerServerServer).TakeTurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poker.PokerServer/TakeTurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PokerServerServer).TakeTurn(ctx, req.(*TakeTurnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PokerServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poker.PokerServer",
	HandlerType: (*PokerServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AckToken",
			Handler:    _PokerServer_AckToken_Handler,
		},
		{
			MethodName: "JoinTable",
			Handler:    _PokerServer_JoinTable_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _PokerServer_Register_Handler,
		},
		{
			MethodName: "TakeTurn",
			Handler:    _PokerServer_TakeTurn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _PokerServer_Play_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "poker.proto",
}
