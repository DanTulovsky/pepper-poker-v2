// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: poker.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type PlayerAction int32

const (
	PlayerAction_PlayerActionNone      PlayerAction = 0
	PlayerAction_PlayerActionRegister  PlayerAction = 1
	PlayerAction_PlayerActionRandomInt PlayerAction = 2
	PlayerAction_PlayerActionJoinTable PlayerAction = 3
)

// Enum value maps for PlayerAction.
var (
	PlayerAction_name = map[int32]string{
		0: "PlayerActionNone",
		1: "PlayerActionRegister",
		2: "PlayerActionRandomInt",
		3: "PlayerActionJoinTable",
	}
	PlayerAction_value = map[string]int32{
		"PlayerActionNone":      0,
		"PlayerActionRegister":  1,
		"PlayerActionRandomInt": 2,
		"PlayerActionJoinTable": 3,
	}
)

func (x PlayerAction) Enum() *PlayerAction {
	p := new(PlayerAction)
	*p = x
	return p
}

func (x PlayerAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlayerAction) Descriptor() protoreflect.EnumDescriptor {
	return file_poker_proto_enumTypes[0].Descriptor()
}

func (PlayerAction) Type() protoreflect.EnumType {
	return &file_poker_proto_enumTypes[0]
}

func (x PlayerAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlayerAction.Descriptor instead.
func (PlayerAction) EnumDescriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

// ClientData is sent by the client during the game
type ClientData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Input        int64        `protobuf:"varint,10,opt,name=input,proto3" json:"input,omitempty"`
	PlayerID     string       `protobuf:"bytes,20,opt,name=playerID,proto3" json:"playerID,omitempty"`
	PlayerName   string       `protobuf:"bytes,30,opt,name=playerName,proto3" json:"playerName,omitempty"`
	TableID      string       `protobuf:"bytes,40,opt,name=tableID,proto3" json:"tableID,omitempty"`
	PlayerAction PlayerAction `protobuf:"varint,50,opt,name=playerAction,proto3,enum=poker.PlayerAction" json:"playerAction,omitempty"`
}

func (x *ClientData) Reset() {
	*x = ClientData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientData) ProtoMessage() {}

func (x *ClientData) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientData.ProtoReflect.Descriptor instead.
func (*ClientData) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{0}
}

func (x *ClientData) GetInput() int64 {
	if x != nil {
		return x.Input
	}
	return 0
}

func (x *ClientData) GetPlayerID() string {
	if x != nil {
		return x.PlayerID
	}
	return ""
}

func (x *ClientData) GetPlayerName() string {
	if x != nil {
		return x.PlayerName
	}
	return ""
}

func (x *ClientData) GetTableID() string {
	if x != nil {
		return x.TableID
	}
	return ""
}

func (x *ClientData) GetPlayerAction() PlayerAction {
	if x != nil {
		return x.PlayerAction
	}
	return PlayerAction_PlayerActionNone
}

// GameData is sent to the client, it tells the client when it's their turn and
// provides the current state
type GameData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output int64 `protobuf:"varint,20,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *GameData) Reset() {
	*x = GameData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_poker_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameData) ProtoMessage() {}

func (x *GameData) ProtoReflect() protoreflect.Message {
	mi := &file_poker_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameData.ProtoReflect.Descriptor instead.
func (*GameData) Descriptor() ([]byte, []int) {
	return file_poker_proto_rawDescGZIP(), []int{1}
}

func (x *GameData) GetOutput() int64 {
	if x != nil {
		return x.Output
	}
	return 0
}

var File_poker_proto protoreflect.FileDescriptor

var file_poker_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x22, 0xb1, 0x01, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x37, 0x0a, 0x0c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x22, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2a, 0x74, 0x0a, 0x0c,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15,
	0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x49, 0x6e, 0x74, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x69, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x03, 0x32, 0x3f, 0x0a, 0x0b, 0x50, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x30, 0x0a, 0x04, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x11, 0x2e, 0x70, 0x6f, 0x6b, 0x65,
	0x72, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x0f, 0x2e, 0x70,
	0x6f, 0x6b, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28,
	0x01, 0x30, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x44, 0x61, 0x6e, 0x54, 0x75, 0x6f, 0x76, 0x73, 0x6b, 0x79, 0x2f, 0x70, 0x65, 0x70,
	0x70, 0x65, 0x72, 0x2d, 0x70, 0x6f, 0x6b, 0x65, 0x72, 0x2d, 0x76, 0x32, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_poker_proto_rawDescOnce sync.Once
	file_poker_proto_rawDescData = file_poker_proto_rawDesc
)

func file_poker_proto_rawDescGZIP() []byte {
	file_poker_proto_rawDescOnce.Do(func() {
		file_poker_proto_rawDescData = protoimpl.X.CompressGZIP(file_poker_proto_rawDescData)
	})
	return file_poker_proto_rawDescData
}

var file_poker_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_poker_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_poker_proto_goTypes = []interface{}{
	(PlayerAction)(0),  // 0: poker.PlayerAction
	(*ClientData)(nil), // 1: poker.ClientData
	(*GameData)(nil),   // 2: poker.GameData
}
var file_poker_proto_depIdxs = []int32{
	0, // 0: poker.ClientData.playerAction:type_name -> poker.PlayerAction
	1, // 1: poker.PokerServer.Play:input_type -> poker.ClientData
	2, // 2: poker.PokerServer.Play:output_type -> poker.GameData
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_poker_proto_init() }
func file_poker_proto_init() {
	if File_poker_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_poker_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_poker_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_poker_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_poker_proto_goTypes,
		DependencyIndexes: file_poker_proto_depIdxs,
		EnumInfos:         file_poker_proto_enumTypes,
		MessageInfos:      file_poker_proto_msgTypes,
	}.Build()
	File_poker_proto = out.File
	file_poker_proto_rawDesc = nil
	file_poker_proto_goTypes = nil
	file_poker_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PokerServerClient is the client API for PokerServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PokerServerClient interface {
	Play(ctx context.Context, opts ...grpc.CallOption) (PokerServer_PlayClient, error)
}

type pokerServerClient struct {
	cc grpc.ClientConnInterface
}

func NewPokerServerClient(cc grpc.ClientConnInterface) PokerServerClient {
	return &pokerServerClient{cc}
}

func (c *pokerServerClient) Play(ctx context.Context, opts ...grpc.CallOption) (PokerServer_PlayClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PokerServer_serviceDesc.Streams[0], "/poker.PokerServer/Play", opts...)
	if err != nil {
		return nil, err
	}
	x := &pokerServerPlayClient{stream}
	return x, nil
}

type PokerServer_PlayClient interface {
	Send(*ClientData) error
	Recv() (*GameData, error)
	grpc.ClientStream
}

type pokerServerPlayClient struct {
	grpc.ClientStream
}

func (x *pokerServerPlayClient) Send(m *ClientData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pokerServerPlayClient) Recv() (*GameData, error) {
	m := new(GameData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PokerServerServer is the server API for PokerServer service.
type PokerServerServer interface {
	Play(PokerServer_PlayServer) error
}

// UnimplementedPokerServerServer can be embedded to have forward compatible implementations.
type UnimplementedPokerServerServer struct {
}

func (*UnimplementedPokerServerServer) Play(PokerServer_PlayServer) error {
	return status.Errorf(codes.Unimplemented, "method Play not implemented")
}

func RegisterPokerServerServer(s *grpc.Server, srv PokerServerServer) {
	s.RegisterService(&_PokerServer_serviceDesc, srv)
}

func _PokerServer_Play_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PokerServerServer).Play(&pokerServerPlayServer{stream})
}

type PokerServer_PlayServer interface {
	Send(*GameData) error
	Recv() (*ClientData, error)
	grpc.ServerStream
}

type pokerServerPlayServer struct {
	grpc.ServerStream
}

func (x *pokerServerPlayServer) Send(m *GameData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pokerServerPlayServer) Recv() (*ClientData, error) {
	m := new(ClientData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PokerServer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poker.PokerServer",
	HandlerType: (*PokerServerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Play",
			Handler:       _PokerServer_Play_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "poker.proto",
}
