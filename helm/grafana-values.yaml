replicas: 2

## See `kubectl explain poddisruptionbudget.spec` for more
## ref: https://kubernetes.io/docs/tasks/run-application/configure-pdb/
podDisruptionBudget:
 minAvailable: 1
#  maxUnavailable: 1

## Pod Annotations
# podAnnotations: {}

## Pod Labels
# podLabels: {}

## Deployment annotations
# annotations: {}

## Expose the grafana service to be accessed from outside the cluster (LoadBalancer service).
## or access it from within the cluster (ClusterIP service). Set the service type and the port to serve it.
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  type: ClusterIP
  port: 80
  targetPort: grafana
    # targetPort: 4181 To be used with a proxy extraContainer
  annotations: {}
  labels: {
    "service": "grafana"
    }
  portName: service

serviceMonitor:
  ## If true, a ServiceMonitor CRD is created for a prometheus operator
  ## https://github.com/coreos/prometheus-operator
  ##
  enabled: true
  path: /metrics
  #  namespace: monitoring  (defaults to use the namespace this chart is deployed to)
  labels: {}
  interval: 1m
  scheme: http
  tlsConfig: {}
  scrapeTimeout: 30s
  relabelings: []

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
## Everything is in the db.
persistence:
  enabled: false

# Administrator credentials when not using an existing secret (see below)
adminUser: admin
# adminPassword: strongpassword

# Use an existing secret for the admin user.
admin:
  existingSecret: "grafana-admin"
  userKey: admin-user
  passwordKey: admin-password

## Define command t
## The name of a secret in the same kubernetes namespace which contain values to be added to the environment
## This can be useful for auth tokens, etc. Value is templated.
envFromSecret: "grafana-env-secret"

## Pass the plugins you want installed as a list.
##
plugins:
  - grafana-piechart-panel

## Configure grafana datasources
## ref: http://docs.grafana.org/administration/provisioning/#datasources
##
datasources:
 datasources.yaml:
   apiVersion: 1
   datasources:
   - name: Prometheus
     type: prometheus
     url: http://kube-prometheus-prometheus:9090
     access: proxy
     isDefault: true

## Configure notifiers
## ref: http://docs.grafana.org/administration/provisioning/#alert-notification-channels
##
notifiers:
 notifiers.yaml:
   notifiers:
   - name: email-notifier
     type: email
     uid: email1
     # either:
     org_id: 1
     # or
     org_name: Main Org.
     is_default: true
     settings:
       addresses: dant@wetsnow.com
   delete_notifiers:

## Configure grafana dashboard providers
## ref: http://docs.grafana.org/administration/provisioning/#dashboards
##
## `path` must be /var/lib/grafana/dashboards/<provider_name>
##
dashboardProviders:
 dashboardproviders.yaml:
   apiVersion: 1
   providers:
   - name: 'default'
     orgId: 1
     folder: ''
     type: file
     disableDeletion: false
     allowUiUpdates: true
     editable: true
     options:
       path: /var/lib/grafana/dashboards/default

## Configure grafana dashboard to import
## NOTE: To use dashboards you must also enable/configure dashboardProviders
## ref: https://grafana.com/dashboards
##
## dashboards per provider, use provider name as key.
##
dashboards:
  default:
  #   some-dashboard:
  #     json: |
  #       $RAW_JSON
  #   custom-dashboard:
  #     file: dashboards/custom-dashboard.json
    ambassador:
      gnetId: 10434
      revision: 1
      datasource: Prometheus
    helm-exporter:
      gnetId: 9367
      revision: 2
      datasource: Prometheus
      tag: helm
    node-exporter:
      gnetId: 1860
      revision: 21
      datasource: Prometheus
    k8s-11454:
      gnetId: 11454
      revision: 14
      datasource: Prometheus
    k8s-11455:
      gnetId: 11455
      revision: 6
      datasource: Prometheus
    k8s-cluster:
      gnetId: 7249
      revision: 1
      datasource: Prometheus
    k8s-cluster-3:
      gnetId: 6417
      revision: 1
      datasource: Prometheus
    k8s-cluster-pods:
      gnetId: 6663
      revision: 1
      datasource: Prometheus
    k8s-cluster-resources:
      gnetId: 7187
      revision: 1
      datasource: Prometheus
    k8s-cluster-pv:
      gnetId: 6739
      revision: 1
      datasource: Prometheus
    k8s-deployment:
      gnetId: 741
      revision: 1
      datasource: Prometheus
    postgres-overview:
      gnetId: 455
      revision: 2
      datasource: Prometheus
    prometheus-overview:
      gnetId: 3662
      revision: 2
      datasource: Prometheus
      tag: prometheus
    prometheus-am:
      gnetId: 9578
      revision: 4
      datasource: Prometheus
    keycloak:
      gnetId: 10441
      revision: 1
      datasource: Prometheus
    loki:
      gnetId: 10880
      revision: 1
      datasource: Prometheus
    nginx:
      gnetId: 11199
      revision: 1
      datasource: Prometheus
  #   local-dashboard:
  #     url: https://example.com/repository/test.json
  #   local-dashboard-base64:
  #     url: https://example.com/repository/test-b64.json
  #     b64content: true


## Grafana's primary configuration
## NOTE: values in map will be converted to ini format
## ref: http://docs.grafana.org/installation/configuration/
##
grafana.ini:
  paths:
    data: /var/lib/grafana/data
    logs: /var/log/grafana
    plugins: /var/lib/grafana/plugins
    provisioning: /etc/grafana/provisioning
  analytics:
    check_for_updates: true
  log:
    mode: console
  grafana_net:
    url: https://grafana.net
  smtp:
    enabled: true
    host: "smtp.sendgrid.net:465"
    from_address: "grafana@wetsnow.com"
    from_name: "Grafana"
  server:
      # The full public facing url you use in browser, used for redirects and emails
    root_url: https://grafana.wetsnow.com
  auth:
    oauth_auto_login: false
    signout_redirect_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/logout?redirect_uri=https%3A%2F%2Flogin.wetsnow.com%2Fauth%2Frealms%2Fwetsnow%2Faccount%2F%23%2F"
  auth.generic_oauth:
    enabled: true
    name: "Keycloak"
    allow_sign_up: false
    auth_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/auth"
    token_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/token"
    api_url: "https://login.wetsnow.com/auth/realms/wetsnow/protocol/openid-connect/userinfo"
    scopes: email profile
    role_attribute_path: "contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
  database:
    type: postgres
    host: postgresql-postgresql-ha-pgpool.db:5432
    name: grafana
    user: grafana
    log_queries: true
    ssl_mode: disable

## Grafana's SMTP configuration
## NOTE: To enable, grafana.ini must be configured with smtp.enabled
## ref: http://docs.grafana.org/installation/configuration/#smtp
smtp:
  # `existingSecret` is a reference to an existing secret containing the smtp configuration
  # for Grafana.
  existingSecret: "grafana-smtp"
  userKey: "user"
  passwordKey: "password"

namespaceOverride: "monitoring"
